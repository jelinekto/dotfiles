#!/bin/bash

# Exit on errors and undefined variables
set -euo pipefail

# Read framerate from file
framerate=$(cat framerate.txt)

# Validate framerate
if ! [[ "$framerate" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "Error: Invalid framerate in framerate.txt"
    exit 1
fi

# Handle directory arguments
search_dirs=("${@:-.}")  # Use arguments if provided, else current directory

# Find and sort PNG files in specified directories
png_files=()
for dir in "${search_dirs[@]}"; do
    while IFS= read -r -d $'\0' file; do
        png_files+=("$file")
    done < <(find "$dir" -type f -iname "*.png" -print0)
done

# Sort files naturally
mapfile -d '' png_files < <(printf '%s\0' "${png_files[@]}" | sort -z -V)

if [ ${#png_files[@]} -eq 0 ]; then
    echo "Error: No PNG files found in specified directories: ${search_dirs[*]}"
    exit 1
fi

# Create temporary video file
temp_video=$(mktemp --suffix=.mkv)

# Generate video from images using direct input
ffmpeg -framerate "$framerate" \
    -f image2pipe \
    -vcodec png \
    -i <(for f in "${png_files[@]}"; do cat "$f"; done) \
    -c:v libx264 \
    -preset medium \
    -crf 17 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -fps_mode cfr \
    -y "$temp_video"

# Check audio file
if [ ! -f "audio.flac" ]; then
    echo "Warning: audio.flac file not found"
    mv "$temp_video" "output.mkv"
else
    # Merge video with audio
    ffmpeg -i "$temp_video" -i audio.flac \
        -c:v copy \
        -c:a aac \
        -b:a 320k \
        -aac_coder twoloop \
        -profile:a aac_low \
        -map 0:v:0 \
        -map 1:a:0 \
        -shortest \
        -y "output.mkv"
fi

echo "Successfully created output.mkv"
