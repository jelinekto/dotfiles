#!/bin/bash
set -e

show_help() {
    echo "Usage: $0 -i INPUT -r FRAMERATE -n NUM_DIRS [-c] [-s START] [-e END]"
    echo "Options:"
    echo "  -i, --input      Input video file (required)"
    echo "  -r, --framerate  Output frame rate (required)"
    echo "  -n, --num-dirs   Number of frame subdirectories (required)"
    echo "  -c, --clean      Clean previous output files before processing"
    echo "  -s, --start      Start time (HH:MM:SS format)"
    echo "  -e, --end        End time (HH:MM:SS format)"
    exit 1
}

# Parse arguments
clean_previous=false
while [[ $# -gt 0 ]]; do
    case "$1" in
        -i|--input)
            input_file="$2"
            shift 2
            ;;
        -r|--framerate)
            framerate="$2"
            shift 2
            ;;
        -n|--num-dirs)
            num_dirs="$2"
            shift 2
            ;;
        -c|--clean)
            clean_previous=true
            shift
            ;;
        -s|--start)
            start_time="$2"
            shift 2
            ;;
        -e|--end)
            end_time="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            ;;
    esac
done

# Validate required arguments
if [[ -z "$input_file" || -z "$framerate" || -z "$num_dirs" ]]; then
    echo "Error: Missing required arguments"
    show_help
fi

# Check for ffmpeg
if ! command -v ffmpeg &> /dev/null; then
    echo "Error: ffmpeg not found. Please install ffmpeg first."
    exit 1
fi

# Clean previous outputs if requested
if $clean_previous; then
    echo "Cleaning previous output files..."
    # Remove audio file
    [[ -f "audio.flac" ]] && rm "audio.flac"
    # Remove framerate file
    [[ -f "framerate.txt" ]] && rm "framerate.txt"
    # Remove frame directories
    for dir in dir_*; do
        if [[ -d "$dir" ]]; then
            rm -rf "$dir"
        fi
    done
fi

# Create temporary directory
tmp_dir="tmp_frames"
mkdir -p "$tmp_dir"
trap 'rm -rf "$tmp_dir"' EXIT

# Build FFmpeg arguments
ffmpeg_args=()
[[ -n "$start_time" ]] && ffmpeg_args+=("-ss" "$start_time")
[[ -n "$end_time" ]] && ffmpeg_args+=("-to" "$end_time")

# Extract audio
echo "Extracting audio..."
ffmpeg -i "$input_file" "${ffmpeg_args[@]}" -vn -acodec flac -y "audio.flac" 2>/dev/null || true

# Extract frames
echo "Extracting frames..."
ffmpeg -i "$input_file" "${ffmpeg_args[@]}" -vf fps="$framerate" "$tmp_dir/frame_%06d.png" 2>/dev/null

# Save framerate
echo "$framerate" > framerate.txt

# Create subdirectories
for i in $(seq -f "%03g" 1 "$num_dirs"); do
    mkdir -p "dir_$i"
done

# Count and distribute frames
shopt -s nullglob
frames=("$tmp_dir"/*.png)
total_frames=${#frames[@]}
if [[ $total_frames -eq 0 ]]; then
    echo "Error: No frames extracted. Check your input parameters."
    exit 1
fi

echo "Extracted $total_frames frames"

# Calculate frames per directory
frames_per_dir=$((total_frames / num_dirs))
remainder=$((total_frames % num_dirs))

echo "Distributing $frames_per_dir frames per directory ($remainder directories get an extra frame)"

# Sort frames numerically
sorted_frames=($(printf "%s\n" "${frames[@]}" | sort -V))

# Distribute frames to subdirectories
current_frame=0
for dir_index in $(seq 1 "$num_dirs"); do
    dest_dir=$(printf "dir_%03d" "$dir_index")

    # Calculate frames for this directory
    if [[ $dir_index -le $remainder ]]; then
        dir_frames=$((frames_per_dir + 1))
    else
        dir_frames=$frames_per_dir
    fi

    # Move frames in contiguous block
    end_frame=$((current_frame + dir_frames))
    for ((idx=current_frame; idx<end_frame; idx++)); do
        frame="${sorted_frames[$idx]}"
        mv "$frame" "$dest_dir/"
    done

    current_frame=$((current_frame + dir_frames))
done

echo "Success!"
echo "Frames saved in $num_dirs directories"
echo "Framerate saved in framerate.txt"
echo "Audio saved as audio.flac"
